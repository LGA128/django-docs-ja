=======================================================
テンプレート作者のための Django テンプレート言語ガイド
=======================================================

:revision-up-to: 4084 (release 0.95+)

Django のテンプレート言語は，釣合いの取れたパワーと簡便さを実現するように，
また HTML を扱いなれた人にとっては快適になるように設計されています．
Smarty_ や CheetahTemplate_ のようなテキストベースのテンプレート言語を経験
したことがあるなら， Django のテンプレートはしっくりくるはずです．

.. _Smarty: http://smarty.php.net/
.. _CheetahTemplate: http://www.cheetahtemplate.org/

.. _Templates:

テンプレート
============

テンプレートは単なるテキストファイルでできています． テンプレートはあらゆる
テキストベースのデータ形式 (HTML, XML, CSV など) を生成できます．

テンプレートには，テンプレートを処理する際に実際の値に置き換えられる
**変数 (variable)** と，テンプレート上でロジックを制御する **タグ (tag)**
が入っています．

以下に示すのは，基本的な項目をいくつか組み込んだ最小限のテンプレートです．
各項目についてはこのドキュメントの後の部分で詳しく説明します::

    {% extends "base_generic.html" %}

    {% block title %}{{ section.title }}{% endblock %}

    {% block content %}
    <h1>{{ section.title }}</h1>

    {% for story in story_list %}
    <h2>
      <a href="{{ story.get_absolute_url }}">
        {{ story.headline|upper }}
      </a>
    </h2>
    <p>{{ story.tease|truncatewords:"100" }}</p>
    {% endfor %}
    {% endblock %}

.. admonition:: 設計哲学

    なぜ (Zope における TAL のような) XML ベースのテキストベースのテンプレー
    トではなく，テキストベースのテンプレートを使うのでしょうか ? それは，
    Django のテンプレート言語を XML/HTML テンプレート以外にも使いたいと考え
    ているからです． World Online では，e-mail や JavaScript， CSV にテンプ
    レートを使っています．テンプレートはテキストベースの形式なら何にでも使
    えるのです．

    そう，もう一つあります: 人間に XML を編集させるなんて，サディスティック
    でしかありません！

.. _Variables:

変数
====

変数 (variable) は ``{{ variable }}`` のような形式になります．テンプレート
エンジンが変数名を見つけると，変数を評価して値を置き換えたものを出力します．

変数の属性値にアクセスするには，ドット (``.``) 表記を使います．

.. admonition:: 舞台裏で行われていること

    技術的には，テンプレートシステムが dot を見つけた場合，以下の順で値の評
    価を試みます:

        * 辞書の照合 (lookup) 
        * 属性の照合
        * メソッドの呼び出し
        * リストをインデクス指定して照合

上の例では， ``{{ section.title }}`` は ``section`` オブジェクトの
``title`` 属性に置き換えられます．

実在しない変数を使うと，テンプレートシステムは ``TEMPLATE_STRING_INVALID``
の設定値を挿入します．デフォルトの値は ``''`` (空文字列) です．

後述の「 `組み込みのリファレンスドキュメント`_ 」を読めば，テンプレートで使える変数名を調
べる手がかりになります．

.. _Filters:

フィルタ
========

変数を表示するために手を加えたい場合には **フィルタ (filter)** を使います．

フィルタは ``{{ name|lower }}`` のように書きます．この例では，変数 ``{{
name }}`` の値は ``lower`` フィルタ，すなわち文字を小文字に変換するフィルタ
を通してから表示します．フィルタの適用は (``|``) で表します．

フィルタは「連鎖 (chain)」できます．フィルタを連鎖させると，あるフィルタか
らの出力を別のフィルタに渡せます．例えば， ``{{ text|escape|linebreaks }}``
は，テキストの内容をエスケープして，改行を ``<p>`` タグに置き換える時の慣用
句としてよく使われています．

フィルタによっては引数をとります．フィルタの引数は 
``{{ bio|truncatewords:"30" }}`` のような形式で表します．この例では，変数
``bio`` の最初の 30 語を表示します．フィルタの引数は常に二重引用符で囲みま
す．

`組み込みフィルタリファレンス`_ では，全ての組み込みフィルタについて説明し
ています．

.. _Tags:

タグ
====

タグは  ``{% tag %}`` のように書きます．タグの考え方は，変数よりもやや複雑
です．出力されるテキストを生成するものもありますし，ループやロジックを実行
して，処理の流れを制御するものもあります．また，外部の情報を取り込んで，後
に出て来る変数から使えるようにするものもあります．

タグによっては，開始タグと終了タグ 
(``{% tag %} ... tag contents ... {% endtag %}``) を必要とするものがありま
す．後述の `組み込みタグリファレンス`_ では，組み込みの全てのタグについて説
明します．Python コードの書き方を知っていれば，タグを自作できます．


.. _Comments:

コメント
========

**開発版の Django で新たに追加された機能です**

テンプレートを部分的にコメントアウトするにはコメント構文 ``{# #}`` を
使います．

例えば，以下のテンプレートをレンダすると ``'hello'`` になります::

    {# greeting #}hello

コメント内には任意のテンプレートコードを入れられます．コメント内の
テンプレートコードが無効なものであってもエラーにはなりません::

    {# {% if foo %}bar{% else %} #}


.. _`Template inheritance`:

テンプレートの継承
==================

Django のテンプレートエンジンにおいて，テンプレートの継承 (inheritance) は
最もパワフル -- かつ最も難解 -- な部分です．テンプレートの継承は，自分のサ
イトで共通に使われる全ての要素の入った，ベースとなる「骨組みの」テンプレー
トを作っておき，その中に子のテンプレートでオーバライドできる 
**ブロック(block)** を定義できます．

テンプレートの継承を理解するには，まず例を挙げるのが一番でしょう::

    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <link rel="stylesheet" href="style.css" />
        <title>{% block title %}My amazing site{% endblock %}</title>
    </head>

    <body>
        <div id="sidebar">
            {% block sidebar %}
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/blog/">Blog</a></li>
            </ul>
            {% endblock %}
        </div>

        <div id="content">
            {% block content %}{% endblock %}
        </div>
    </body>
    </html>

このテンプレートは，単純な 2 カラム形式のページで使うような HTML のスケルト
ンドキュメントです．これを ``base.html`` と呼びましょう．空のブロックをコン
テンツで埋めるのは「子 (child)」のテンプレートの仕事です．

この例では， ``{% block %}`` タグを使って 3 つのブロックを定義し，子テンプ
レートが値を埋められるようにしています． ``block`` タグの役割は，テンプレー
ト中のタグで囲まれた部分を子テンプレートでオーバライドできることをテンプレー
トエンジンに知らせることにあります．

子テンプレートは以下のようになります::

    {% extends "base.html" %}

    {% block title %}My amazing blog{% endblock %}

    {% block content %}
    {% for entry in blog_entries %}
        <h2>{{ entry.title }}</h2>
        <p>{{ entry.body }}</p>
    {% endfor %}
    {% endblock %}

``{% extends %}`` タグが継承のカギです．このタグはテンプレートエンジンに対
して，自分自身が他のテンプレートを拡張 (extend) していることを教えます．テ
ンプレートシステムがこのテンプレートを処理する際，システムはまず親となるテ
ンプレート -- ここでは "base.html" を探します．

さて，この時点で，テンプレートエンジンは ``base.html`` 内に三箇所の
``{% block %}`` が定義されていることに気づき，これらのブロックを子テンプレー
トの該当するブロックで置き換えます． ``blog_entries`` の値に応じて，出力は
以下のようになります::

    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <link rel="stylesheet" href="style.css" />
        <title>My amazing blog</title>
    </head>

    <body>
        <div id="sidebar">
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/blog/">Blog</a></li>
            </ul>
        </div>

        <div id="content">
            <h2>Entry one</h2>
            <p>This is my first entry.</p>

            <h2>Entry two</h2>
            <p>This is my second entry.</p>
        </div>
    </body>
    </html>

子テンプレートには ``sidebar`` ブロックが定義されていないので，親テンプレー
トの値がそのまま使われます．親テンプレートの ``{% block %}`` タグの内容は，
常にフォールバックの値として使われます．

テンプレートの継承は必要に応じて何段階にもできます．継承を使うよくある場合
の一つに，以下のような三段階のアプローチがあります:

    * サイトの主なルック & フィールを決める ``base.html`` テンプレートを作
      成します．
    * サイトの各「セクション」ごとに ``base_SECTIONNAME.html`` テンプレート
      を作成します．たとえば， ``base_news.html`` , ``base_sports.html`` と
      いった具合です．これらのテンプレートでは ``base.html`` を拡張して，セ
      クション固有のスタイルやデザインを取り込んでおきます．
    * ニュース記事やブログエントリといった各種ページ用の個々のテンプレート
      を作成します．これらのテンプレートでは適切なセクションテンプレートを
      拡張します．

このようなアプローチを取れば，コードの最利用性を最大限に高め，セクション毎
のナビゲーションのような項目を簡単に共通のコンテンツ領域に追加できます．

継承を扱うときの小技をいくつか挙げておきます:

    * テンプレートで ``{% extends %}`` を使う場合は，テンプレート中の最初の
      テンプレートタグにせねばなりません．さもなければテンプレート継承はう
      まく動作しません．

    * ベースのテンプレートで ``{% block %}`` を多用すればするほど，よりよい
      テンプレートになります．子テンプレートは親テンプレートのブロックを必
      ずしも全て定義しなくてもよいことを思い出して下さい．ブロックをたくさ
      ん用意しておき，適切なデフォルト値を入れておいて，子テンプレートで必
      要な値だけを再定義すればよいのです．フックは少ないよりも沢山ある方が
      よいのです．

    * 同じような内容を含むテンプレートをいくつも作っていることに気づいたら，
      それはすなわちその内容を親テンプレートの ``{% block %}`` に入れるべき
      だということです．

    * 親テンプレートのブロックに入っているコンテンツを取り出す必要がある場
      合， ``{{ block.super }}`` とするとうまくいきます．親テンプレートのブ
      ロックをオーバライドするのではなく，内容を追加したい場合に便利です．

最後に，同じテンプレート中に同じ名前の ``{% block %}`` を複数定義できないこ
とに注意して下さい．この制限は，ブロックタグが「双方向」に作用するため，す
なわち，あるブロックタグは何らかの値を埋めるための穴であるだけでなく，穴を
埋める *親テンプレートの* コンテンツも定義しているために存在しています．同
じ名前の ``{% block %}`` が一つのテンプレート内に複数あると，そのテンプレー
トの親テンプレートは，該当するブロックの内容を子テンプレートのどの
``{% block %}`` 設定で置き換えればよいのか分からなくなってしまいます． 

.. _`Using the built-in reference`:

組み込みのリファレンスドキュメント
==================================

Django の admin インタフェースには，サイトで使える全てのテンプレート関連要
素のリファレンスがあります．このドキュメントを読みたければ， admin インタ
フェースにアクセスして，ページの右上部分にある「ドキュメント
(Documentation)」というリンクをクリックして下さい．

リファレンスは，タグ(Tags)，フィルタ(Filters)，モデル(Models)，そしてビュー
(Views)の 4 つのセクションに分かれています．

**Tags** や **Filters** セクションでは，全ての組み込みタグについて解説して
います． (実際，後で示すタグやフィルタのリファレンスは全てこれらのセクショ
ンから直接取り出したものです) また，利用可能なカスタムのタグやフィルタライ
ブラリについてのリファレンスもあります． 

最も大事なのは **Views** ページです．サイトの各 URL には個別のエントリが
表示され， URL をクリックすると以下のような内容を表示します:

    * ビューを生成する view 関数の名前．
    * ビューの役割を示す短い説明．
    * **コンテキスト** ，ビューのテンプレートで使える変数のリスト．
    * ビューで使われているテンプレートの名前．

各ビューのドキュメントにはブックマークレット(bookmarklet)があり，別のページ
からこのビューのドキュメントにジャンプするために使えます．

Django で作成したサイトは通常，データベースオブジェクト中心に動いているので，
**Models** のセクションはシステム中の各タイプのオブジェクトと，そのオブジェ
クトで利用できる全てのフィールドについて説明しています．

ドキュメントのページを読めば，全てのタグ，フィルタ，テンプレートで利用でき
る変数やオブジェクトが分かります．

.. _Custom tag and filter libraries:

カスタムタグとカスタムフィルタのライブラリ
==========================================

アプリケーションによっては，カスタムのタグやフィルタライブラリを提供してい
ます．こうしたタグをテンプレートで使いたい場合， ``{% load %}`` タグを使い
ます::

    {% load comments %}

    {% comment_form for blogs.entries entry.id with is_public yes %}

上の例では， ``load`` タグは ``comments`` という名前のタグライブラリを読み
込んでいます．このタグライブラリを読み込むと， ``comment_form`` タグを使え
るようになります．カスタムライブラリのリストを探したければ，自分のサイトの
admin でドキュメント置場を参照してください．

``{% load %}`` タグは複数のライブラリ名を同時に読み込めます．ライブラリ名は
スペースで区切って下さい::

    {% load comments i18n %}

.. _Custom libraries and template inheritance:

カスタムのライブラリとテンプレートの継承
----------------------------------------

カスタムタグやフィルタライブラリをロードした場合，タグやフィルタは現在のテ
ンプレートだけで利用でき，テンプレート継承パス上の親テンプレートや子テンプ
レートでは利用できません．

例えば， ``foo.html`` に ``{% load comments %}`` というタグを入れておいても，
子テンプレート (``{% extends "foo.html" %}`` を使っているテンプレート) で
comments という名前のテンプレートタグやフィルタを使えるわけでは
*ありません* ．子テンプレート側で独自に ``{% load comments %}`` を入れてお
く必要があります．

これはメンテナンス性を高めるための仕様です．

.. _Built-in tag and filter reference:

組み込みタグ，組み込みフィルタリファレンス
==========================================

admin サイトを使えないユーザのために，一連のタグとフィルタのリファレンスを
以下に掲載しておきます．とはいえ， Django は高度にカスタマイズ可能なので，
自分のサイトでどんなタグやフィルタが使えて，それらがどう働くかを知りたいな
ら，最終的な答えは自分のサイトの admin にあります．

.. _Built-in tag reference:

組み込みタグリファレンス
------------------------

block
~~~~~

子テンプレートでオーバライドできるブロックを定義します． 
`テンプレートの継承`_ を参照してください． 

comment
~~~~~~~

``{% comment %}`` から ``{% endcomment %}`` までの内容を全て無視します．

cycle
~~~~~

タグを処理するごとに，指定した文字列を循環して返します．

ループの中では，ループごとに指定した文字列を循環して返します::

    {% for o in some_list %}
        <tr class="{% cycle row1,row2 %}">
            ...
        </tr>
    {% endfor %}

ループの外側では，最初に一意な名前を与えておき，以後はその名前を使います．
例えば::

        <tr class="{% cycle row1,row2,row3 as rowcolors %}">...</tr>
        <tr class="{% cycle rowcolors %}">...</tr>
        <tr class="{% cycle rowcolors %}">...</tr>

任意の個数の値を使えます．値はカンマで区切ります．値の間にスペースを入れて
はなりません -- 使えるのはカンマだけです．

debug
~~~~~

現在のコンテキストや import されたモジュールなどを含んだデバッグ情報ひと揃
いを出力します．

extends
~~~~~~~

このテンプレートが親テンプレートに対する拡張であることを指示します．

このタグには 2 種類の使い方があります:

  * ``{% extends "base.html" %}`` (引用符つき) のような場合，リテラル値
    ``"base.html"`` を親テンプレートの名前として使います．

  * ``{% extends variable %}`` のようにすると， ``variable`` の値を親テンプ
    レートの名前として使います． ``variable`` の値が文字列の場合， Django
    はその文字列を親テンプレートの名前として使います．値が ``Template`` オ
    ブジェクトの場合，Django はそのオブジェクトを親テンプレートにします．

詳しくは `テンプレートの継承`_ を参照してください．

filter
~~~~~~

タグのコンテンツを変数フィルタ (variable filter) を使ってフィルタします．

フィルタはパイプでつないで連鎖でき，引数をもたせることができます．

使用例::

    {% filter escape|lower %}
        This text will be HTML-escaped, and will appear in all lowercase.
    {% endfilter %}

firstof
~~~~~~~

タグに渡された変数のうち，False でない最初の変数の値を出力します．全ての変
数が False であった場合，何も出力しません．

使用例::

    {% firstof var1 var2 var3 %}

上は，以下のテンプレートと等価です::

    {% if var1 %}
        {{ var1 }}
    {% else %}{% if var2 %}
        {{ var2 }}
    {% else %}{% if var3 %}
        {{ var3 }}
    {% endif %}{% endif %}{% endif %}

for
~~~

アレイの各要素に渡ってループします．例えば，アスリート (athlete) のリストを
``athlete_list`` で渡して表示するには::

    <ul>
    {% for athlete in athlete_list %}
        <li>{{ athlete.name }}</li>
    {% endfor %}
    </ul>

のようにします．

``{% for obj in list reversed %}`` のようにすると，リストに対して逆順のルー
プを実行できます．

for ループは，ループの各回ごとに使える変数を設定します:

    ==========================  ================================================
    変数名                      説明
    ==========================  ================================================
    ``forloop.counter``         現在のループ回数番号 (1 から数えたもの)
    ``forloop.counter0``        現在のループ回数番号 (0 から数えたもの)
    ``forloop.revcounter``      末尾から数えたループ回数番号 (1 から数えたもの)
    ``forloop.revcounter0``     末尾から数えたループ回数番号 (0 から数えたもの)
    ``forloop.first``           最初のループであれば True になります
    ``forloop.last``            最後のループであれば True になります
    ``forloop.parentloop``      入れ子のループの場合，一つ上のループを表します
    ==========================  ================================================

if
~~

変数を評価して，値が「真」 (値が存在して，空の配列でなく，ブール値が偽でな
い) の場合，ブロック内のコンテンツを出力します::

    {% if athlete_list %}
        Number of athletes: {{ athlete_list|length }}
    {% else %}
        No athletes.
    {% endif %}

上の例では， ``athlete_list`` が空でなければ，アスリートの人数を
``{{ athlete_list|length }}`` で表示します．

例にもあるように， ``if`` タグにはオプションの ``{% else %}`` 節があり，テ
ストに失敗した場合に表示されるコンテンツを定義できます．

``and`` や ``or`` で複数の変数をチェックしたり， ``not`` で否をとったりでき
ます::

    {% if athlete_list and coach_list %}
        Both athletes and coaches are available.
    {% endif %}

    {% if not athlete_list %}
        There are no athletes.
    {% endif %}

    {% if athlete_list or coach_list %}
        There are some athletes or some coaches.
    {% endif %}

    {% if not athlete_list or coach_list %}
        There are no athletes or there are some coaches (OK, so
        writing English translations of boolean logic sounds
        stupid; it's not our fault).
    {% endif %}

    {% if athlete_list and not coach_list %}
        There are some athletes and absolutely no coaches.
    {% endif %}

    {% if athlete_list and not coach_list %}
        There are some athletes and absolutely no coaches.
    {% endif %}

``and`` と ``or`` 節を同じタグの中に入れると，ロジックの優先順位があいまい
になるため， 同じ ``if`` タグには入れられません．例えば，以下のテンプレート
は無効です::

    {% if athlete_list and coach_list or cheerleader_list %}

``and`` タグと ``or`` タグを使ったロジックを行いたければ，以下の例のように
``if`` タグを入れ子にしてください::

    {% if athlete_list %}
        {% if coach_list or cheerleader_list %}
            We have athletes, and either coaches or cheerleaders!
        {% endif %}
    {% endif %}

同じ論理記号はいくつでも並べられます．ただし，同じ演算子を使う場合に限りま
す．例えば，以下は有効なテンプレートです::

    {% if athlete_list or coach_list or parent_list or teacher_list %}

ifchanged
~~~~~~~~~

ブロック内のコンテンツが直前のループと違う値になるかどうか調べます．

``ifchanged`` ブロックタグはループの中で使います．このタグには二通りの使い
方があります．

1. ブロック内のレンダリング対象コンテンツを直前のループでの状態と比較して，
   内容が変化している場合にのみコンテンツを表示する場合です．たとえば，日付
   のリストを表示するときに，月が変わったときだけ月名を表示したければ以下の
   ようにします::

        <h1>Archive for {{ year }}</h1>

        {% for date in days %}
            {% ifchanged %}<h3>{{ date|date:"F" }}</h3>{% endifchanged %}
            <a href="{{ date|date:"M/d"|lower }}/">{{ date|date:"j" }}</a>
        {% endfor %}

2. **Django の開発版で新たに登場した機能です** タグに引数を指定すると，変数
   が変化したかどうかを調べます．例えば，以下の例では日付が変化したときに日
   付を表示し，日付と時刻が同時に変化したときのみ時刻も表示します::

        {% for date in days %}
            {% ifchanged date.date %} {{ date.date }} {% endifchanged %}
            {% ifchanged date.hour date.date %}
                {{ date.hour }}
            {% endifchanged %}
        {% endfor %}

ifequal
~~~~~~~

2 つの引数が互いに等しい場合にブロックの内容を出力します．

例::

    {% ifequal user.id comment.user_id %}
        ...
    {% endifequal %}

``{% if %}`` タグと同様，オプションで ``{% else %}`` 節を使えます．

引数はハードコードされた文字列でもよいので，以下のような表現は有効です::

    {% ifequal user.username "adrian" %}
        ...
    {% endifequal %}

引数と比較できるのは，テンプレート変数または文字列だけです． ``True`` や
``False`` のような， Python オブジェクトに対する等価比較は行えません．
``True`` や ``False`` との比較を行いたければ ``if`` を使ってください．

ifnotequal
~~~~~~~~~~

2 つの引数が互いに等しくない場合にブロックの内容を出力します．

include
~~~~~~~

テンプレートをロードして，現在のコンテキストを使ってレンダリングします．あ
るテンプレートに別のテンプレートを取り込む ("include") 方法の一つです．

テンプレート名はハードコードされた (引用符で囲った) 文字列でもよく，引用符
は一重でも二重でもかまいません．

以下の例では， ``"foo/bar.html"`` という名前のテンプレートを取り込みます::

    {% include "foo/bar.html" %}

次の例では， 変数 ``template_name`` に入っている名前のテンプレートを取り込
みます::

    {% include template_name %}

取り込まれたテンプレートは，取り込んだ側で使われているコンテキストの下でレ
ンダリングされます．下の例では ``"Hello, John"`` を出力します:

    * コンテキスト: 変数 ``person`` を ``"john"`` に設定
    * テンプレート::

        {% include "name_snippet.html" %}

    * ``name_snippet.html`` テンプレート::

        Hello, {{ person }}

``{% ssi %}`` も参照してください．

load
~~~~

カスタムのテンプレートタグリストを読み込みます．

詳しくは `カスタムタグとカスタムフィルタのライブラリ`_ を参照してください．

now
~~~

指定したフォーマット文字列にしたがって現在の日時を表示します．

フォーマットは PHP の ``date()`` 関数 (http://php.net/date) と同じで，いく
つかの点で拡張されています．

利用できるフォーマットを示します:

    ================  ========================================  =====================
    フォーマット文字  説明                                      出力例
    ================  ========================================  =====================
    a                 ``'a.m.'`` または ``'p.m.'`` (Associated  ``'a.m.'``
                      Press に合わせるため，'.' が入っている点
                      が PHP と違います)．                      
    A                 ``'AM'`` または ``'PM'`` です．           ``'AM'``
    B                 実装されていません．                      
    d                 月の中の日． 2 桁のゼロ詰めです．         ``'01'`` から ``'31'``
    D                 週の中の日． 3 文字のテキスト形式です．   ``'Fri'``
    f                 12 時間表記の時と分．ただし，ゼロ分の     ``'1'``, ``'1:30'``
                      場合には表示しません．独自の拡張です．
    F                 月名を長いテキスト形式で表したものです．  ``'January'``
    g                 12 時間表記の時．ゼロ詰めはしません．     ``'1'`` から ``'12'``
    G                 24 時間表記の時．ゼロ詰めはしません．     ``'0'`` から ``'23'``
    h                 12 時間表記の時です．                     ``'01'`` から ``'12'``
    H                 24 時間表記の時です．                     ``'00'`` から ``'23'``
    i                 分です．                                  ``'00'`` から ``'59'``
    I                 実装されていません．
    j                 月の中の日．ゼロ詰めしません．            ``'1'`` から ``'31'``
    l                 週の中の曜日．長いテキスト形式です．      ``'Friday'``
    L                 閏年かどうかを表すブール値です．          ``True``または``False``
    m                 月です．2 桁でゼロ詰めしたものです．      ``'01'`` から ``'12'``
    M                 月です．3 文字のテキスト形式です．        ``'Jan'``
    n                 月です．ゼロ詰めしません．                ``'1'`` から ``'12'``
    N                 Associated Press スタイルの月の省略表記   ``'Jan.'``, ``'Feb.'``, ``'March'``, ``'May'``
                      です．独自の拡張です．
    O                 グリニッジ標準時からの時差です．          ``'+0200'``
    P                 時刻です．12 時間表記の時，分，           ``'1 a.m.'``, ``'1:30 p.m.'``, ``'midnight'``, ``'noon'``, ``'12:30 p.m.'``
                      そして 'a.m.'/'p.m.' です．分がゼロの
		      場合には省略され，必要に応じて
		      'midnight' または 'noon' になります．
		      独自の拡張です．
    r                 RFC 822 に従ったフォーマットの日時です．  ``'Thu, 21 Dec 2000 16:01:07 +0200'``
    s                 秒です． 2 桁のゼロ詰めです．             ``'00'`` から ``'59'``
    S                 月の中の日につける 2 文字の序数接尾辞     ``'st'``, ``'nd'``, ``'rd'`` or ``'th'``
                      です．
    t                 月の日数です．                            ``28`` から ``31``
    T                 計算機のタイムゾーン設定です．            ``'EST'``, ``'MDT'``
    U                 実装されていません．
    w                 週の中の曜日です．ゼロ詰めしません．      ``'0'`` (Sunday) to ``'6'`` (Saturday)
    W                 ISO-8601 に従った年の中の週番号です．     ``1``, ``23``
                      週は月曜日から始まります．
    y                 2 桁の年です．                            ``'99'``
    Y                 4 桁の年です．                            ``'1999'``
    z                 年の中の日                                ``0`` から ``365``
    Z                 タイムゾーンオフセットを秒であらわした    ``-43200`` から ``43200``
                      ものです．UTC よりも西側のタイムゾーン値
                      は全て負の値になり，東側の値は常に正に
                      なります．
    ================  ========================================  =====================

例::

    It is {% now "jS F Y H:i" %}

フォーマット文字列中で普通の文字列を使いたければ，バックスラッシュでエスケー
プできます．下の例では，"f" が時刻を表すフォーマット指定子として解釈されな
いようにエスケープしています． "o" はフォーマット指定子ではないのでエスケー
プしていません::

    It is the {% now "jS o\f F" %}

このテンプレートは "It is the 4th of September" になります．

regroup
~~~~~~~


オブジェクトのリストから，属性値によって同種のオブジェクトをまとめます．

この難解なタグを説明するには，例を使うのが一番でしょう: 仮に， ``Person``
オブジェクトからなるリスト ``people`` があり，``Person`` オブジェクトには
``first_name``, ``last_name``, および ``gender`` という属性があるとします．
リストを以下のように表示したいとしましょう:

    * Male:
        * George Bush
        * Bill Clinton
    * Female:
        * Margaret Thatcher
        * Condoleezza Rice
    * Unknown:
        * Pat Smith

以下のようなテンプレートを使うと，この小難しいタスクを実現してくれます::

    {% regroup people by gender as grouped %}
    <ul>
    {% for group in grouped %}
        <li>{{ group.grouper }}
        <ul>
            {% for item in group.list %}
            <li>{{ item }}</li>
            {% endfor %}
        </ul>
    {% endfor %}
    </ul>

上で見たように， ``{% regroup %}`` は ``grouper`` および ``list`` 属性にオ
ブジェクトのリストをつめこんでゆきます． ``grouper`` にはグループ化に使った
項目が入ります． ``list`` には ``grouper`` を同じくするオブジェクトのリスト
が入ります．

この場合， ``grouper`` は ``Male``, ``Female`` および ``Unknown`` になり，
``list`` は各 ``grouper`` ごとのリストになります．

グループ化対象のリストがグループ化したいキーでソートされていない場合，
``{% regroup %}`` はうまく働かないので注意して下さい! すなわち， ``People``
のリストを ``gender`` で並べたければ，あらかじめ以下のようにして並べかえて
おかねばなりません::

    {% regroup people|dictsort:"gender" by gender as grouped %}

spaceless
~~~~~~~~~

ブロック内の HTML タグ間にある空白文字をスペース一つに変換します．タブ文字
や改行も含みます．

仕様例::

    {% spaceless %}
        <p>
            <a href="foo/">Foo</a>
        </p>
    {% endspaceless %}

上の例は下のような HTML になります::

    <p> <a href="foo/">Foo</a> </p>

*タグ間の* 空白だけが正規化されます -- タグとテキストの間のスペースは正規化
 しません．下の例では， ``Hello`` の周りの空白をはぎとりません::

    {% spaceless %}
        <strong>
            Hello
        </strong>
    {% endspaceless %}

ssi
~~~

指定したファイルの内容をページ内に取り込みます．

"inlcude" タグと同様， ``{% ssi %}`` は別のファイルの内容を取り込みます．引
数は絶対パスで指定せねばなりません::

    {% ssi /home/html/ljworld.com/includes/right_generic.html %}

オプションの "parsed" パラメタを指定すると，取り込まれたファイルを現在のコ
ンテキストのテンプレートコードとして評価します::

    {% ssi /home/html/ljworld.com/includes/right_generic.html parsed %}

``{% ssi %}`` を使う場合には，セキュリティの観点から， Django の設定に
`ALLOWED_INCLUDE_ROOTS`_ を定義しておく必要があるでしょう．

See also: ``{% include %}``.

.. _ALLOWED_INCLUDE_ROOTS: settings.html#allowed-include-roots
.. ALLOWED_INCLUDE_ROOTS: http://www.djangoproject.com/documentation/settings/#allowed-include-roots

templatetag
~~~~~~~~~~~

テンプレートタグの構成に使われる文字自体を出力します．

Django のテンプレートには「エスケープ」の概念がないので，テンプレートタグの
構成に使われている要素を出力したければ ``{% templatetag %}`` タグを使わねば
なりません．

引数にはどの要素出力するかを指定します:

    ==================  =======
    Argument            Outputs
    ==================  =======
    ``openblock``       ``{%``
    ``closeblock``      ``%}``
    ``openvariable``    ``{{``
    ``closevariable``   ``}}``
    ``openbrace``       ``{``
    ``closebrace``      ``}``
    ``opencomment``     ``{#``
    ``closecomment``    ``#}``
    ==================  =======

注意: ``opencomment`` と ``closecomment`` は開発版の Django で登場した要素
です．

widthratio
~~~~~~~~~~

バーチャートなどを生成する場合のために，指定した値と最大値との比を計算し，
定数に掛けた値を返します．

例えば::

    <img src="bar.gif" height="10" 
     width="{% widthratio this_value max_value 100 %}" />

のようにすると， ``this_value`` が 175 で ``max_value`` が 200 の場合には，
(175/200 = .875; .875 * 100 = 87.5 で，88 に丸めた結果) 画像の幅は 88 ピク
セルになります．


.. _`Built-in filter reference`:

組み込みフィルタリファレンス
-----------------------------


add
~~~

入力値に対して引数を加算します．

addslashes
~~~~~~~~~~

入力値の末尾にスラッシュを追加します．文字列を JavaScript に渡す場合などに
便利です．


capfirst
~~~~~~~~

入力値の先頭の文字を大文字に変換します．

center
~~~~~~

入力値を引数に指定された幅のフィールド内に中央寄せします．

cut
~~~

入力値の中から引数に指定した値を全て除去します．

date
~~~~

引数に指定した書式で日付をフォーマットします． (``now`` タグと同じです)

default
~~~~~~~

値がない場合，引数に指定したデフォルト値を使います．

default_if_none
~~~~~~~~~~~~~~~

値が ``None`` の場合，引数に指定したデフォルト値を使います．

dictsort
~~~~~~~~

辞書のリストを入力にとり，引数に指定したプロパティに対応する値でリストをソー
トして返します．

dictsortreversed
~~~~~~~~~~~~~~~~

辞書のリストを入力にとり，引数に指定したプロパティに対応する値でリストを逆
順にソートして返します．

divisibleby
~~~~~~~~~~~

値を引数で除算できる場合に真を返します．

escape
~~~~~~

入力文字中の HTML 特有の文字をエスケープします．具体的には，以下のような置
換を行います:

    * ``"&"`` から ``"&amp;"`` へ
    * ``<`` から ``"&lt;"`` へ
    * ``>`` から ``"&gt;"`` へ
    * ``'"'`` (double quote) から ``'&quot;'`` へ
    * ``"'"`` (single quote) から ``'&#39;'`` へ

filesizeformat
~~~~~~~~~~~~~~

ファイルサイズを「目に優しい (human-readable)」表現 (``'13 KB'``, 
``'4.1 MB'``, ``'102 bytes'`` など) に変換します． 

first
~~~~~

リスト中の最初の要素を返します．

fix_ampersands
~~~~~~~~~~~~~~

アンパーサンド ("&") を ``&amp;`` エンティティで置き換えます．

floatformat
~~~~~~~~~~~

浮動小数点数を小数点以下ひと桁でまるめます．ただし，小数部がある場合にかぎ
ります．例えば:

    * ``36.123`` は ``36.1`` になります．
    * ``36.15`` は ``36.2`` になります．
    * ``36`` は ``36`` になります．

get_digit
~~~~~~~~~

入力が整数の場合，引数に指定した桁の数字を返します． 1 は右はじの桁，2 は右
から 2 つ目の桁，といった具合に指定します．入力が整数でない場合には，入力値
をそのまま返します．

join
~~~~

Python の ``str.join(list)`` と同じく，リストを文字列でつなぎます．

length
~~~~~~

入力値の長さを返します．リストを扱う場合に便利です．

length_is
~~~~~~~~~

入力値の長さと引数が等しいかどうかを返します．

linebreaks
~~~~~~~~~~

改行を ``<p>`` と ``<br />`` タグに変換します．

linebreaksbr
~~~~~~~~~~~~

改行を ``<br />`` タグに変換します．

linenumbers
~~~~~~~~~~~

テキストを行番号付きで表示します．

ljust
~~~~~

入力値を指定幅のフィールド内に左詰めします．

**引数:** フィールドの幅

lower
~~~~~

文字列を全て小文字に変換します．

make_list
~~~~~~~~~

入力値をリストに変換します．整数の場合には各桁の数字からなるリストに，文字
列の場合は各文字からなるリストに変換します．

phone2numeric
~~~~~~~~~~~~~

電話番号 (文字を含む場合もあります) を数値だけの番号に変換します．例えば，
``'800-COLLECT'`` は ``'800-2655328'`` になります．

入力値は正しい電話番号でなくてもかまいません．このフィルタはどんな文字列で
も変換します．

pluralize
~~~~~~~~~

値が 1 でない場合に，複数形を表す接尾辞を付けます．デフォルトでは，接尾辞は  
``'s'`` です．

例::

    You have {{ num_messages }} message{{ num_messages|pluralize }}.

``'s'`` 以外の接尾辞が必要な場合，フィルタのパラメタに指定できます．

例::

    You have {{ num_walruses }} walrus{{ num_walrus|pluralize:"es" }}.

単なる接尾辞だけで複数形化できない場合，単数形と複数形の接尾辞の両方をコン
マで区切って指定できます．

例::

    You have {{ num_cherries }} cherr{{ num_cherries|pluralize:"y,ies" }}.


pprint
~~~~~~

pprint.pprint のラッパです -- 単なるデバッグ用にすぎません．

random
~~~~~~

リストからランダムな要素を返します．

removetags
~~~~~~~~~~

入力から引数に指定された [X]HTML タグを除去します．タグはスペースで区切って
指定します．

rjust
~~~~~

指定幅のフィールドに右詰めします．

**引数:** フィールドの幅

slice
~~~~~

リストに対するスライスを返します．

Python におけるリストのスライスと同じ構文を使います．スライスについて学びた
ければ，
http://diveintopython.org/native_data_types/lists.html#odbchelper.list.slice
を読んで下さい．

例: ``{{ some_list|slice:":2" }}``

slugify
~~~~~~~

入力を小文字に変換し，語でない (英数字またはアンダースコアでない) 文字を除
去し，スペースをハイフンに変換します．また，先頭と末尾の空白をはぎとります．

stringformat
~~~~~~~~~~~~

引数に指定されたフォーマット指示子に従って変数をフォーマットします．フォー
マット指示子は Python のフォーマット指示構文と同じですが，先頭の "%" は必要
ありません．

Python の文字列フォーマットについては
http://www.python.jp/doc/release/lib/typesseq-strings.html を参照してくださ
い．

striptags
~~~~~~~~~

[X]HTML タグを全てはぎとります．

time
~~~~

時刻を指定の書式でフォーマットします (``now`` タグと同じです)．

timesince
~~~~~~~~~

日付を経過時間の形式にフォーマットします． (例: "4 days, 6 hours").

オプションの引数をとります．

オプションの引数として， 比較対象として使う時刻をとります (引数を省略すると
*現在時刻* を使います)．例えば， ``blog_date`` が ``1 June 2006`` を表す日
付オブジェクトで， ``comment_date`` が ``08:00 on 1 June 2006`` を表す日時
オブジェクトの場合， ``{{ comment_date|timesince:blog_date }}`` は 
"8 hours" を返します．

timeuntil
~~~~~~~~~

``timesince`` に似ていますが，現在時刻から指定の日付または日時までの時刻を
計算します．

例えば，現在の日付が ``1 June 2006`` で， ``conference_date`` が 
``29 June 2006`` の場合， ``{{ conference_date|timeuntil }}`` は "28 days"
を返します．

オプションの引数として， (*現在時刻* の代わりに) 比較対象として使う時刻をと
ります． 例えば， ``from_date`` が ``22 June 2006`` の場合，
``{{ conference_date|timeuntil:from_date }}`` は "7 days" を返します．


title
~~~~~

文字列をタイトルケースに変換します．

truncatewords
~~~~~~~~~~~~~

文字列を指定語数以下になるように切り詰めます．

**引数:** 文字列を切り詰めるまでの語数

unordered_list
~~~~~~~~~~~~~~

再帰的に入れ子になったリストを入力にとり， HTML の無番号リスト (UL,
unordered list) に変換します．**ただし**，最も外側の <ul> タグは表示しませ
ん．

リストは適切な形式になっているものとみなします．例えば，``var`` が
``['States', [['Kansas', [['Lawrence', []], ['Topeka', []]]], ['Illinois', []]]]``
であれば， ``{{ var|unordered_list }}`` は以下のようになります::

    <li>States
    <ul>
            <li>Kansas
            <ul>
                    <li>Lawrence</li>
                    <li>Topeka</li>
            </ul>
            </li>
            <li>Illinois</li>
    </ul>
    </li>

upper
~~~~~

入力値をすべて大文字に変換します．

urlencode
~~~~~~~~~

入力値を URL で使えるようにエスケープします．

urlize
~~~~~~

平文で書かれた URL をクリック可能なリンクに変換します．

urlizetrunc
~~~~~~~~~~~

URL をクリック可能なリンクに変換します．このとき，指定の長さ以上の URL を切
り詰めます．

**引数:** URL を切り詰める長さ

wordcount
~~~~~~~~~

語数を返します．

wordwrap
~~~~~~~~

指定した行幅で語列をラップします．

**引数:** テキストをラップするまでの語数

yesno
~~~~~

入力値 (真，偽，オプションで None) に応じて，引数に指定した文字のいずれかを
返します．

==========  ======================  ==================================
入力値      引数                    出力
==========  ======================  ==================================
``True``    ``"yeah,no,maybe"``     ``yeah``
``False``   ``"yeah,no,maybe"``     ``no``
``None``    ``"yeah,no,maybe"``     ``maybe``
``None``    ``"yeah,no"``           ``"no"`` (None に対応する値が
                                    ない場合は False 扱いになります)
==========  ======================  ==================================

.. _Other tags and filter libraries:

その他のタグとフィルタライブラリ
================================

Django には他にも二つのテンプレートタグライブラリがついてきます．これらのラ
イブラリは ``INSTALLED_APPS`` 設定で明示的に有効化した上で， ``{% load %}``
タグを使ってテンプレート上にロードせねばなりません．

django.contrib.humanize
-----------------------

データを「ヒトにやさしい」表現にする上で便利な Django テンプレートフィルタ
です． `humanize のドキュメント`_ を参照してください．

.. _humanize documentation: http://www.djangoproject.com/documentation/add_ons/#humanize
.. _`humanize のドキュメント`: http://www.djangoproject.com/documentation/add_ons/#humanize

django.contrib.markup
---------------------

以下のマークアップ言語を実装したテンプレートフィルタのコレクションです:

    * Textile
    * Markdown
    * ReST (ReStructured Text)
