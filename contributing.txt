===================================
Django プロジェクトに協力するために
===================================

:revision-up-to: 4203 (release 0.95+)

Django を *使う* のを楽しいと思ってもらえたなら， *使い続ける* 前にすこし待っ
てください．私達は多大な情熱をかけて，ユーザがコミュニティのメンバに貢献で
きるよう手助けしています．Django の開発を手伝うにはいくつもの方法があります:


    * Django について blog を書きましょう．私達は知っている限りの全ての
      Django 関係の blog を `コミュニティのページ`_ で配信しています．この
      ページに登録したい blog があるなら jacob@jacobian.org に連絡してくだ
      さい．

    * バグ報告や機能に関する要望を `チケットトラッカ`_ に提出しましょう．
      私達が望んでいるバグ報告の提出方法の詳細は `バグの報告`_ を読んで下さい．

    * 新たな機能を追加したり従来の機能を修正するパッチを提出しましょう．
      パッチの提出方法は `パッチの提出`_ を参照してください．

    * `django-developers`_ メーリングリストに参加して， Django をよりよくす
      るためのアイデアを皆で共有しましょう．どんな提案でも歓迎します．ただ
      し私達は後ろだてになるコードがないスケールの大きな話には懐疑的です．

    * 他のユーザが提出したパッチのトリアージ (選別) を行います．トリアージ
      の手順については，後述の  `チケットのトリアージ <#ticket-triage>`_ を
      参照してください．

Django 開発コミュニティに参加するのに必要な知識はこれだけです．このドキュメ
ントの残りの部分では，開発コミュニティがどのようになっていて，どうやってバ
グを処理しているかについて詳しく説明し，メーリングリストやその他こまごまと
した注意点について記述しています．

.. _Reporting bugs:

バグの報告
==============

上手に書かれたバグ報告は *信じられないくらい* 助けになります．とはいえ，バ
グ追跡システムでの作業はかなりのオーバヘッドを要するので，チケットトラッカ
をできるだけ有意義に使うよう協力していただけると助かります．特に:

    * **必ず** FAQ_ を読んで，自分の抱えている問題が既知のものでないか探し
      て下さい． 

    * **必ず** `トラッカを検索`_ して，自分の抱えている問題がファイルされて
      いないか探して下さい． 

    * **必ず** *最初に* `django-users`_ で質問して，自分の考えていることが
      バグだということを確認してください． 

    * **必ず** 完結した，再現可能な，的確なバグ報告を書いて下さい．完全なコー
      ド断片やテストセットなど，可能な限り多くの情報を含めて下さい．問題に
      対する詳細かつ明瞭な説明と，問題を再現するための手順を含めてください．
      小さなテストケースでバグを再現できれば最良のバグ報告になります．

    * **決して** サポート質問にチケットシステムを **使わないで下さい．** 質
      問は `django-users`_ リストや `#django`_ IRC チャネルでお願いします．

    * **決して** スケールの大きな機能の提案にチケットシステムを 
      **使わないで下さい．** Django のコアに関わる大きな変更は，
      取り掛かる前に必ず `django-developers`_ リストで議論します．

    * **決して** "wontfix" にマークされた問題を
      **開き直さないで下さい．** "wontfix" マークは決定事項であり，この問題
      についてはこれ以上修正できないか，修正する予定はないのです．納得でき
      なければ， `django-developers`_ で質問してください．

    * **決して** 長い議論をチケットシステムで **行わないで下さい．** チケッ
      トシステムでは議論内容がじきに失われてしまうからです．チケットの内容
      について議論になりそうなときは `django-developers`_ に場所を移して下
      さい．

.. _Reporting security issues:

セキュリティ問題の報告
=========================

セキュリティ問題の報告は security@djangoproject.com にお願いします．このメー
リングリスト経験豊かで信頼できる Django 開発者だけが購読でき，アーカイブは
非公開になっています．

Django に脆弱性が発見された場合，私達は以下のように行動します:

    * 報告者に対して，報告を受けとったことと，脆弱性がまもなく修正されるこ
      とを知らせます．修正までのおおまかなタイムラインを示し，報告者に対し
      て，アナウンスを行うまでにどのくらいの間この問題を秘密にしておけるか
      問い合わせます．

    * 現在のバージョンと，二つ前までのリリースに対するパッチを含む修正版の
      開発に必要な期間，他の全ての開発を停止します．

    * 脆弱性と修正版をアナウンスするする日取りを決めます． パッチを適用する
      側と脆弱性を不正利用する側の間の「軍拡競争」を抑えるため，私達はセキュ
      リティ問題を即座にアナウンスしません．

    * 影響を受けるバージョンの Django を使っているユーザのうち，私達が把握
      している人全員に事前に通知します．この通知は個人宛の電子メールで行わ
      れます．メールには脆弱性に関するドキュメントと該当パッチへのリンク，
      そしてこの脆弱性を公式の公開日まで秘密にしておくよう要請する文が入っ
      ています．

    * あらかじめ決めておいた日取りに基づいて，脆弱性と修正版を公開し，アナ
      ウンスします．通常は新たなバージョンの Django リリースを意味しますが，
      場合によっては現在のリリースに対する単なるパッチになります．

.. _Submitting patches:

パッチの提出
==================

Django のコードに対するパッチはつねに大歓迎です．実際，パッチつきのバグ報告
は，パッチのないものよりも *はるかに* 素早く修正されます．

.. Patch style:

パッチ形式
-----------

    * Django の `コーディングスタイル`_ に従っているか確認してください．

    * ``svn diff`` コマンドの返す書式のパッチを提出してください．ただし，コー
      ドよりも英語で変更点を説明した方がはるかに分かりやすい場合は例外です．
      例えばインデントはよくある例です．というのも，コードの違いがインデン
      トでしかない場合，パッチを読むのはとても大変だからです．

    * `チケットトラッカ`_ で， "attach file" ボタンを使ってチケットにパッチ
      を添付してください．一行のパッチでないかぎり，チケットの説明やコメン
      トの中にパッチを *入れないで* 下さい．

    * パッチファイルの名前には ``.diff`` 拡張子をつけて下さい．そうすること
      で，チケットトラッカは構文のハイライト強調を正しく行うので助かります．

    * チケットのタイトルの先頭に "[patch] " をつけて下さい． "[patch]" がつ
      くことでチケットにパッチが入っていることが分かりやすくなり，チケット
      システムがそのチケットを `パッチつきのチケットのリスト`_ に追加してく
      れます．

    * 問題を解決したり機能を追加するためのコードはパッチの重要な部分ですが，
      それだけではいけません．よいパッチというものには必ず回帰テストが付属
      していて，問題が解決されたことを検証できる (そして将来同様の問題が再
      発しないようにできる) ものです． 
      
    * パッチ中のコードが新たな機能や既存の機能に対する変更をもたらす場合，
      パッチにはドキュメントも含めてください．

.. _Non-trivial patches:

重要パッチ
----------

「重要 (non-trivial)」パッチとは，単なるバグフィクスに留まらず，Django に
新たな機能をもたらし，何らかの設計上の判断を迫るようなパッチです．

重要パッチを提出する場合には，その問題について `django-developers`_ で議論
済みであるという証明を含めてください．自分のパッチが重要パッチかどうか判断
しかねる場合には問い合わせてください．

.. _Ticket triage:

チケットのトリアージ
====================

残念ながら， `チケットトラッカ`_ に届くバグ報告全てが，上に述べた
`チケットの要件 <#reporting-bugs>`_ を満たしているわけではありません．
パッチの添付されたチケットもたくさんありますが，それら全てが 
`よいパッチ <#patch-style>`_ の要件を満たしているわけでもありません．

こうした状況の打開を手助けする一つの方法に，他のユーザが報告したバグのトリ
アージ (選別) 作業があります．オープン中のチケットから，前に述べた要件の不
足しているものを取り上げ，問題を再現してみてください．必要なら不足の部分を
補い，チケットにパッチが付属していなければ作成してください．

チケットに対して不足の部分を全て補い，要件を全て満たしたパッチを作成したら，
`django-developers`_ にメールしてください．チケットをトリアージした旨と，
そのチケットの扱い方について推奨する案を記載してください．

トリアージ作業にまず必要なのは根気強さです．自分がトリアージしたチケットが
依然として注意を引かないようであれば，自分のチケットに目を通してもらえるよ
う時おりやんわりと問い合わせる必要もあるでしょう．とはいえ，トリアージ作業
の手腕に定評を得るにつれて，より開発者たちの注意を引きやすくなるはずです．

.. _required details: `Reporting bugs`_
.. _good patch: `Patch style`_


.. _Submitting and maintaining translations:

翻訳の提出と維持
================

admin サイトやバリデータのエラーメッセージなど，Django は様々な部分で国際化
されており，ユーザの言語設定に従って様々なテキストを表示します．

翻訳カタログは世界中の Django ユーザによる貢献でできています．間違った翻訳
や，まだ翻訳存在しない言語に新たな翻訳を追加したい場合は以下のようにします:

    * `Django i18n メーリングリスト`_ に参加して自己紹介してください．
    * `i18n のドキュメント` に従って翻訳を作成し，提出してください．

.. _`Django i18n メーリングリスト`: http://groups.google.com/group/django-i18n/
.. _`i18n のドキュメント`: i18n.html

.. _Coding style:

コーディングスタイル
====================

コードを書いて Django に取り込みたいなら，以下のコーディング標準に従って下
さい:

    * 特に指定のない限り `PEP 8`_ に従って下さい．

    * インデントにはスペース 4 つを使います．

    * 変数名，関数名，メソッド名には camelCase ではなくアンダースコアを使っ
      て下さい (たとえば ``poll.getUniqueVoters`` ではなく
      ``poll.get_unique_voters()``)．

    * クラス名 (やクラスを返すファクトリ関数) には ``InitialCaps`` を使って
      ください．

    * 国際化の必要な全ての文字列をマークしておいてください．詳しくは 
      `i18n ドキュメント`_ を参照してください．

    * Django テンプレートコード内では，波括弧とタグコンテンツの間に 1 個 (1
      個だけ) スペースをいれて下さい．

      [正]::

          {{ foo }}

      [誤]::

          {{foo}}


    * Django のビューを書くときには，最初のパラメタは必ず ``request`` とい
      う名前にしてください．

      [正]::

          def my_view(request, foo):
              # ...

      [誤]::

          def my_view(req, foo):
              # ...

    * コード中に名前を埋め込まないでください．私達は Django への貢献に大い
      に感謝してはいますが，ポリシとして，コード中，例えば Python モジュー
      ルの先頭などに個々の開発者の名前を表示しないことにしています．

.. _Committing code:

コードの commit
===============

Django の Subversion リポジトリにコードをコミットする場合には以下のガイドラ
インに従って下さい:

    * 中規模から大規模な変更 (「中規模から大規模」の判断は各自に任せます)
      の際には，変更前に `django-developers`_ メーリングリストに相談を持ち
      込んで下さい．

      `django-developers`_ に持ち込んだ話題に対して返事がなかった場合，自分
      のアイデアが素晴らしく，すぐにでも実装すべきだと皆が思ったため誰も何
      も言わないのだと勘違いしないでください． Django の開発指揮者はメーリ
      ングリストの議論にすぐに割ける時間を持ち合わせていないので，返事には
      数日待たねばならない場合もあるのです．

    * 詳しいコミットメッセージを過去形で書いて下さい．現在形を使ってはなり
      ません．

          * 良い例: "Fixed Unicode bug in RSS API."
          * 悪い例: "Fixes Unicode bug in RSS API."
          * 悪い例: "Fixing Unicode bug in RSS API."

    * ブランチにコミットする場合，コミットメッセージの先頭にブランチ名を付
      けて下さい．例えば "magic-removal: Added support for mind reading."
      のようにします．

    * 意味のある変更のまとまりであるかぎり，できるだけ細かい変更に分けてコ
      ミットしてください．つまり，たまに大きなコミットをするのではなく，小
      さなコミットを頻繁に行うようにしてください．例えば，機能 X を実装して
      いて，その機能の実現にライブラリ Y の修正が必要なら，まず Y の修正を
      コミットして，次に X を別にコミットしてください．これだけで， Django
      のコア開発者全員が変更を追うための *大きな* 助けになります．

    * コミットによって Django `チケットトラッカ`_ の何らかのチケットをクロー
      ズする場合，コミットメッセージの先頭に "Fixed #abc" というメッセージ
      を入れて下さい． "abc" はコミットによって修正されるチケットの番号です．
      例えば "Fixed # 123 -- Added support for foo" のようにします．私達は
      Subversion と Trac を結びつけているので，この形式のメッセージを使って
      commit した場合，関連するチケットを自動的にクローズし，完全なコミット
      メッセージをコメントとしてチケットに追加します．

      コミットによってブランチのチケットをクローズする場合，ブランチ名を先
      にもってきます．例えば
      "magic-removal: Fixed #123 -- Added whizbang feature." のようにします．

      ちなみに，この機能は `Trac の post-commit フック`_ で実現しています．
      .. _Trac post-commit hook: http://trac.edgewall.org/browser/trunk/contrib/trac-post-commit-hook
      .. _`Trac の post-commit フック`: http://trac.edgewall.org/browser/trunk/contrib/trac-post-commit-hook


    * コミットメッセージで Django `チケットトラッカ`_ の何らかのチケットを
      参照し，かつチケットを *閉じない* 場合， "Refs #abc" というフレーズを
      入れて下さい． "abc" はコミットで参照しているチケットの番号です．私達
      は Subversion と Trac を結びつけているので，この形式のメッセージを使っ
      て commit した場合，関連するチケットに完全なコミットメッセージをコメ
      ントとして追加します． 

.. _Unit tests:

単体テストの作成
====================

Django には独自のテストスイートが付属しています．テストは tarball 内の
``test`` ディレクトリ下にあります．ポリシとして，常に全てのテストがパスする
ようにしています．

テストでは以下の項目をカバーしています:

    * モデル API とデータベース API (``tests/modeltests/``)．
    * キャッシュシステム (``tests/regressiontests/cache.py``)．
    * ``django.utils.dateformat`` モジュール
      (``tests/regressiontests/dateformat/``)．
    * データベースの型キャスト (``tests/regressiontests/db_typecasts/``)．
    * テンプレートシステム (``tests/regressiontests/templates/`` および
      ``tests/regressiontests/defaultfilters/``)．
    * ``QueryDict`` オブジェクト (``tests/regressiontests/httpwrappers/``)．
    * markup テンプレートタグ (``tests/regressiontests/markup/``)．
    * ``django.utils.timesince`` モジュール
      (``tests/regressiontests/timesince.py``)．

テストスイートに対する協力は何でも歓迎します!

Django のテストは全て， Django に付属のアプリケーションテストインフラを使っ
ています．テストの書き方の詳細は `Django アプリケーションのテスト`_ を参照
してください．

.. _`Django アプリケーションのテスト`: testing.html

.. _Running the unit tests:

単体テストの実行
----------------------

テストを実行するには， ``tests/`` ディレクトリ下に移って以下のように入力し
ます:: 

    ./runtests.py --settings=path.to.django.settings

そうです．テストには設定モジュールが必要なだけでなく，データベース設定の情
報，つまり ``DATABASE_ENGINE``, ``DATABASE_USER`` および
``DATABASE_PASSWORD`` も必要です．また，全てのテストをパスするには，
``ROOT_URLCONF`` 設定
(この値は単にあればよいだけで，内容は無視されます)と， ``SITE_ID`` 設定
(整数ならどんな値でもかまいません) も指定しておかねばなりません．

単体テストは既に作成済みのデータベースに影響を及ぼすことはありません．単体
テストは ``django_test_db`` というデータベースを作成しますが，これはテスト
終了時に削除されます．また，この理由から，テストを行うユーザアカウントには
``CREATE DATABASE`` を実行する権限が必要です．

.. _Requesting features:

機能に関する要望
===================

私達は常に Django を改良しようと努めています．その中で，皆さんから寄せられ
る要望は一つの鍵になっています．効果的に要望を出すコツをいくつか紹介してお
きます:

    * チケットトラッカではなく， `django-developers`_ に要望を出して下さい．
      メーリングリストの方が多くの人の目に触れやすいからです．

    * 不足している機能と，それをどのように実装すればよいと思っているかを，
      すっきりと，かつ詳細に説明してください．可能ならサンプルコード (実際
      に動かなくても構いません) をつけてください．

    * *なぜ* その機能を取り入れたいのかを説明してください．自明な場合もあり
      ますが， Django は実際の開発者が実際の仕事に使うために設計されている
      ので，ある機能がどのようにユーザの役に立つのかを説明する必要がありま
      す．

ほとんどのオープンソースプロジェクトと同じく，コードは大きな説明力を持って
います．追加したい機能のコードを書く意志があるか，(さらに望ましいのは) すで
に書き上げているのなら，ずっと受け入れられやすくなるでしょう．大がかりな機
能で，複数の開発者が必要になりそうなら，いつでも喜んで実験用ブランチをリポ
ジトリに作成します．詳しくは次節を参照してください．

.. _Branch policy:

ブランチの管理ポリシ
====================

一般に，ほとんどの開発は trunk で行われており， trunk は安定に保たれていま
す． trunk のコードは，いついかなるときでも実運用サイトを動作させられなけれ
ばなりません．

このため，大規模なアーキテクチャ上の変更，一つのパッチに収まらないくらい大
きな変更を伴う場合や，多くの人が関わる必要のある変更の場合には，専用のブラ
ンチを作成します．例えば `i18n ブランチ`_ を見てください．この手の変更を行
いたいと考えていて，作業をしたい場合には， `django-developers`_ でブランチ
を作成してもらうよう問い合わせて下さい．変更を試すのに必要な文だけのブラン
チを作成します．

ツリーの一部にしか作業しない場合でも，常に Django ツリー全体のブランチを作
成します．これはブランチへのスイッチ作業を苦痛なく行えるようにするためです．

ブランチで作業している開発者は， trunk の変更を定期的にブランチにマージせね
ばなりません．少なくとも週に一度はマージしてください． trunk からマージを行
う度に，マージとリビジョン番号を commit メッセージに記載してください．

ブランチが安定していて， trunk へのマージ準備が完了したら，
`django-developers`_ にアラートを投稿します．

あるブランチがマージされると，そのブランチは「死んだ」ものとみなされます．
死んだブランチには書き込めなくなり，古いブランチは定期的に「刈り取られ」
ます． SVN への世話焼きを最小限にするため，ブランチから trunk へのマージは
一度しか行いません．

.. _Using branches:

ブランチを使う
--------------

ブランチをテストするには，二つの作業が必要です:

    * 該当するブランチのコードを Subversion から取得します．

    * Python の site-package ディレクトリが，該当ブランチの ``django``
     を含むように設定します．


.. _Getting the code from Subversion:

Subversion からコードを取り出す
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ブランチコードの最新版を入手するには Subversion を使います::

    svn co http://code.djangoproject.com/svn/django/branches/<branch>/

``<branch>`` はブランチの名前です．ブランチの名前については
`ブランチ名一覧 <http://code.djangoproject.com/browser/django/branches>`_ 
を参照してください．

既存の Django を Subversion からソースコードをチェックアウトして使っている
場合には，ディレクトリ全体を特定のバージョンに自動的に変換できます．
``django`` ディレクトリの下で以下のコマンドを実行してください::

    svn switch http://code.djangoproject.com/svn/django/branches/<branch>/

``svn co`` ではなく ``svn switch`` を使う利点は， ``switch`` コマンドを使っ
た場合，ローカルコピー上で既に変更済みの内容についてはファイルを変更しない
点にあります． ``switch`` はローカルコピー上の変更を "スイッチ先の" コード
にマージします． ``svn switch`` には欠点もあります．それは，ローカルコピー
上でコードに変更を加えた場合，スイッチ先のコードにも同じ部分に変更があると
衝突するという問題です．

(``svn switch`` を使う場合には，次の節で述べるような，Pythonのモジュール検
索パスを変更する操作は必要ありません．)

.. _list of branch names: http://code.djangoproject.com/browser/django/branches

.. _Pointing Python at the new Django version:

Python に別のバージョンの Django を使わせる
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ブランチのコードを取り出したら，ブランチの ``site-packages`` ディレクトリ
の構成を変更して，ブランチ版の ``django`` ディレクトリを使えるようにする必
要があります．
(``site-packages`` ディレクトリは ``/usr/lib/python2.4/site-packages`` や
``/usr/local/lib/python2.4/site-packages``, ``C:\Python\site-packages``
などにあります．)

もっとも簡単な方法は，元の ``django`` ディレクトリを ``django.OLD`` のよう
な別の名前に変えて， trunk などから取り出したバージョンのコードをコピーし，
名前を ``django`` に変更します．

別の方法として， ``django`` と言う名前のシンボリックリンクを作成して，特定
のブランチの ``django`` パッケージの場所を指すという方法もあります．元に戻
したい場合には，シンボリックリンクが元のコードを指すように変更しなおすだけ
です．

Django 0.95 やそれ以前のバージョンをインストールしていて，インストールに
``python setup.py install`` を使った場合， ``django`` ではなく
``Django-0.95-py2.4.egg`` といった名前のディレクトリになっているでしょう．
この場合， ``setuptools.pth`` を編集して，該当する Django の ``.egg``
の書かれた行を削除してから， ``django`` のブランチを ``site-packages`` にコ
ピーします．

.. _Official releases:

公式リリース
============

Django のリリース番号は以下のようにして付けられます:

    * バージョンは ``A.B`` または ``A.B.C`` という形式でつけられます．

    * ``A`` はメジャーバージョン番号で，増えるのは Django に重大な変更が加
      えられ，変更が必ずしも以前のバージョンと互換でない場合だけです．従っ
      て， Django 6.0 で動いたコードは Django 7.0 では動かなくなるかもしれ
      ません．

    * ``B`` はマイナーバージョン番号で，比較的大きいながらも後方互換性を保っ
      た変更の際に増えます． Django 6.4 向けに書かれたコードは Django 6.5
      でも動作するでしょう．

      マイナーリリースでは，以前のリリースの特定の機能を撤廃することがあり
      ます．バージョン ``A.B`` の機能が撤廃された場合，撤廃された機能は
      ``A.B+1`` では動作します． ``A.B+2`` では
      ``PendingDeprecationWarning`` 警告を送出しますが動作します．
      ``A.B+3`` では完全に機能を削除します．メジャーポイントリリースでは撤
      廃済みの仕様を全て削除します．

    * ``C`` はマイクロバージョンで，バグやセキュリティ修正の度に増えます．
      マイクロバージョンは以前のマイクロバージョンと 100% 後方互換性を保ち
      ます．

    * 場合によってはリリース候補 (release candidate) を作成します．リリース
      候補のバージョン番号は  ``A.BrcN`` の形式で， ``A.B`` の ``N`` 番目の
      リリース候補であることを表します．

以上のバージョン番号スキームの例外として，1.0 以前の Django のコード
があります． 1.0 リリース以前のコードでは，後方互換性を全く保証していません．

Subversion 上では， Django の各リリースは `tags/releases_` でタグづけされて
います．trunk 由来ではないバグフィクスリリースやセキュリティ修正リリースを
出す必要画ある場合，該当リリースは  ``branches/releases`` にコピーされ，
バグフィクスリリースになります．

.. _Deciding on features:

仕様に関する決定
================

ある仕様の要望が出て議論が始まると，そのうち仕様を取り入れるべきか棄却すべ
きかという決定をせねばなりません．

私達は，可能な場合はいつでもまずおおまかな合意を形成しようと試みます．その
後，たいていは `django-developers`_ において，その機能について正式でない投
票を行います．投票では， Apache や Python で使われている形式を採用しており，
投票は +1, +0, -0, or -1 のいずれかを用いて行います．これらの票の大雑把な解
釈は以下の通りです:

    * +1: "これはいい．強く同意します (I love the idea and I'm strongly
      committed to it.)"

    * +0: "いいんじゃないかな (Sounds OK to me.)"

    * -0: "あまりわくわくしないが，反対もしない (I'm not thrilled, but I
       won't stand in the way.)"

    * -1: "強く反対．このアイデアが実現したらとても嫌 (I strongly disagree
       and would be very unhappy to see the idea turn into reality.)"

django-developers での投票は正式なものではありませんが，その結果は真摯に受
け止められます．適切な投票期間を経て，明らかな合意を形成できた場合には，投
票の決定に従うでしょう．

とはいえ，つねに合意を形成できるわけではありません．その場合，完全コミッタ
全員の中で十分に議論を重ねた後，最終判断を慈悲深き終身独裁者 (Benevolent
Dictators for Life) である Adrian と Jacob に委ねることとします．

.. _Commit access:

commit 権限
=============

Django プロジェクトには二種類のコミッタがいます:

完全コミッタ (full committers)
    長期間にわたって Django のコードベースに貢献してきており，メーリングリ
    ストにおいても礼儀正しく親切で， Django の開発に十分な時間を割けること
    が分かっている人達です．

    完全な commit 権限者の敷居は極めて高いものです．全ての完全コミッタによ
    る全会一致でのみ受け入れることとし，その決定は覆りません．

部分コミッタ (partial committers)
    「個別領域のエキスパート」です．管轄下にあるサブシステムのコードに直接
    チェックインする権限を持ち，サブシステムの懸案事項に対する正式な投票権
    を持ちます．このタイプの権限は， Django の大きなサブフレームワーク
    に貢献し，継続してメンテナンスを続けたい人に与えられるものです．

    完全コミッタと同様，部分コミッタの受け入れも全ての完全コミッタ (と同じ
    領域の部分コミッタ) による全会一致でのみ受け入れることとします．とはい
    え，敷居はやや低く，個別領域で十分な専門性を示しているということで十分
    です．

コミット権限を得たければ，現在コミッタを勤めているだれかに個人的にコンタク
トしてください．コミット権限を公の場でリクエストするのはフレームの元であり，
一切無視します．

.. _`コミュニティのページ`: http://www.djangoproject.com/community/
.. _`チケットトラッカ`: http://code.djangoproject.com/newticket
.. _`トラッカを検索`: http://code.djangoproject.com/search
.. _`パッチつきのチケットのリスト`: http://code.djangoproject.com/report/12
.. _`i18n ドキュメント`: http://www.djangoproject.com/documentation/i18n/
.. _`i18n ブランチ`: http://code.djangoproject.com/browser/django/branches/i18n

.. _community page: http://www.djangoproject.com/community/
.. _ticket tracker: http://code.djangoproject.com/newticket
.. _django-developers: http://groups.google.com/group/django-developers
.. _FAQ: http://www.djangoproject.com/documentation/faq/
.. _search the tracker: http://code.djangoproject.com/search
.. _django-users: http://groups.google.com/group/django-users
.. _`#django`: irc://irc.freenode.net/django
.. _list of tickets with patches: http://code.djangoproject.com/report/12
.. _PEP 8: http://www.python.org/peps/pep-0008.html
.. _i18n documentation: http://www.djangoproject.com/documentation/i18n/
.. _i18n branch: http://code.djangoproject.com/browser/django/branches/i18n
.. _`tags/releases`: http://code.djangoproject.com/browser/django/tags/releases
