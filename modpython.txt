=============================
mod_python で Django を動かす
=============================

:revision-up-to: 4805 (release 0.96)

Django をプロダクションサーバ上で動かす設定として，現状では Apache_ と
`mod_python`_ の組み合わせを推奨しています．

mod_python は `mod_perl`_ とよく似ていて， Apache の中に Python を埋め込み，
サーバ起動時に Python のコードをメモリ上に読み込みます．読み込まれたコード
は Apache のプロセスが生きている間ずっと残るので，他のやりかたに比べて明確
なパフォーマンスの向上につながります．

Django を mod_python で動かす場合， Apache 2.x と mod_python 3.x が必要です．
また， Apache を使う場合， `worker MPM`_ ではなく `prefork MPM`_ を使うよう
勧めます．

興味があれば `FastCGI で Django を動かす`_ もどうぞ。

.. _Apache: http://httpd.apache.org/
.. _mod_python: http://www.modpython.org/
.. _mod_perl: http://perl.apache.org/
.. _prefork MPM: http://httpd.apache.org/docs/2.2/mod/prefork.html
.. _worker MPM: http://httpd.apache.org/docs/2.2/mod/worker.html
.. _`FastCGI で Django を動かす`: ../fastcgi/

基本的な設定
============

Django を mod_python で動かすようにするには，まず Apache がインストールされ，
mod_python モジュールが有効になっていることを確かめます．

次に， ``httpd.conf`` ファイルを編集し，以下のような設定を追加します::

    <Location "/mysite/">
        SetHandler python-program
        PythonHandler django.core.handlers.modpython
        SetEnv DJANGO_SETTINGS_MODULE mysite.settings
        PythonDebug On
    </Location>

``mysite.settings`` は自分の環境での設定ファイルを指す Python のモジュール
検索パスになるよう置き換えて下さい．

この設定は， Apache に 「/mysite/ の下の全ての URL は mod_python で処理し，
処理には Django mod_python ハンドラを使うように」命令します．また，
``DJANGO_SETTINGS_MODULE`` を渡して， mod_python にどこに設定ファイルがある
のか教えます．

上の例では ``<Directory>``  ではなく ``<Location>`` ディレクティブを使って
います．前者はファイルシステム上の場所を指定するのに使い，後者はウェブサイ
トのURL 構造上の場所を指定するのに使います．従って， ``<Directory>`` を使っ
た指定は意味をなさないのです．

また， Django プロジェクトを ``PYTHONPATH`` に追加するよう設定している場合
には，以下のような設定を mod_python に教えておく必要があります::

    PythonPath "['/path/to/project'] + sys.path"

また， ``PythonAutoReload Off`` のようなディレクティブを設定して，パフォー
マンスを向上させられます．使えるオプションのリストは
`mod_python のドキュメント`_ を参照してください．

注意しなければならないのは，プロダクションサーバでは，  ``PythonDebug Off``
を設定すべきであるということです． ``PythonDebug`` が ``On`` に設定されたま
まだと， mod_python に不具合が生じたときに，恰好の悪い (そして赤裸々な)
Python トレースバックを表示してしまいます．

Apache を再起動しましょう． /mysite/ やその下の URL へのリクエストが Django
によって提供されているはずです． Django の URLconf は "/mysite/" を切り取り
らず，完全な URL を渡すことに注意して下さい

Django で作られたサイトを mod_python 上で運営している場合， Python コードに
対して変更を加える度に Apache を再起動する必要があります．

ひとつの Apache に複数の Django をインストールする
==================================================

ひとつの Apache に複数の Django をインストールするのは簡単です．
``VirtualHost`` を使って，以下のようにするだけです::

    NameVirtualHost *

    <VirtualHost *>
        ServerName www.example.com
        # ...
        SetEnv DJANGO_SETTINGS_MODULE mysite.settings
    </VirtualHost>

    <VirtualHost *>
        ServerName www2.example.com
        # ...
        SetEnv DJANGO_SETTINGS_MODULE mysite.other_settings
    </VirtualHost>

一つの ``VirtualHost`` 設定の中に複数の Django をインストールしたい場合，
mod_python のキャッシュが Django の動作を台無しにしないように特に気を配る必
要があります． ``PythonInterpreter`` ディレクティブを使って，
``<Location>`` ディレクティブごとに別のインタプリタを使うようにしてください::

    <VirtualHost *>
        ServerName www.example.com
        # ...
        <Location "/something">
            SetEnv DJANGO_SETTINGS_MODULE mysite.settings
            PythonInterpreter mysite
        </Location>

        <Location "/otherthing">
            SetEnv DJANGO_SETTINGS_MODULE mysite.other_settings
            PythonInterpreter mysite_other
        </Location>
    </VirtualHost>

``PythonInterpreter`` の値は，二つの ``Location`` ブロックの間で違う値にさ
えなっていれば何でもかまいません．

mod_python 上で開発用サーバを動かす
===================================

開発用サーバに mod_python を使う場合，コードを変更する度にサーバを再起動す
るようなやんちゃは避けられます． ``MaxRequestsPerChild 1`` をアパッチの
``httpd.conf`` ファイルに指定し，Apache にリクエストごとに全てをリロードさ
せてください．とはいえ，これをプロダクションサーバでやらないでください．さ
もないと， Django の恩恵が失われてしまいます．

あなたが ``print`` 文を散りばめてデバッグするタイプのプログラマなら，
``print`` 文は mod_python では何の効果も及ぼさないということに注意しましょ
う．``print`` 文を使っても， Apache のログには何も出力されません．
mod_python を使った設定でデバッグ情報を出力したいのなら::

    assert False, the_value_i_want_to_see

のようにするか，ページのテンプレートにデバッグ情報を追加してください．

.. _mod_python のドキュメント: 
    http://www.python.jp/doc/contrib/modpython/directives.html
.. _mod_python documentation: http://modpython.org/live/current/doc-html/directives.html

.. _Serving media files:

メディアファイルの提供
========================

Django は，自分ではメディアファイルの提供を行わず，ユーザの選んだ Web サー
バにその仕事を任せます．

メディアの提供には，別のウェブサーバ，すなわち Django を動かしていないサー
バを使うよう勧めます．お勧めはいくつかあります:

* lighttpd_
* TUX_
* Apache_ の軽量化 (stripped-down) 版

とはいえ，Django を動作させているのと同じ Apache の ``VirtualHost`` でメディ
アファイルを提供せざるを得ない場合には，以下のようにして特定の場所でだけ
mod_python を切ります::

    <Location "/media/">
        SetHandler None
    </Location>

``Location`` ディレクティブの引数を，メディアファイルを置いている場所のルー
ト URL に置き換えて下さい． ``<LocationMatch>`` を使って，正規表現に一致さ
せるようにもできます．

以下の例では， Django をサイトのルートで設定し， ``media`` サブディレクトリ
の下と， ``.jpg``， ``.gif`` ，および ``.png`` で終わる URL だけでは明示的
に Django を無効にしています::

    <Location "/">
        SetHandler python-program
        PythonHandler django.core.handlers.modpython
        SetEnv DJANGO_SETTINGS_MODULE mysite.settings
    </Location>

    <Location "media">
        SetHandler None
    </Location>

    <LocationMatch "\.(jpg|gif|png)$">
        SetHandler None
    </LocationMatch>


.. _lighttpd: http://www.lighttpd.net/
.. _TUX: http://en.wikipedia.org/wiki/TUX_web_server
.. _Apache: http://httpd.apache.org/

.. _Serving the admin files:

admin ファイルの提供
====================

Django の開発サーバは自動的に admin メディアファイルを提供しますが，それ以
外の設定ではこれはあてはまりません．admin ファイルを提供するには， Apache
なりその他のメディアサーバなりで設定を行う必要があります．

admin ファイルは Django 配布物の (``django/contrib/admin/media``) ディレク
トリ下にあります．

お勧めのアプローチは二つあります:

    1. ドキュメントルートから admin メディアファイルへのシンボリックリンク
       を作ります．そうすれば，リンクを張った Django 関係のファイル (コード
       **と** テンプレート) を一箇所にまとめられるので，自分のコードを
       ``svn update`` するだけで admin テンプレートを最新の状態に保てます．
    2. または， admin メディアファイルをコピーして Apache のドキュメントルー
       トに入れます．

エラー処理
==============

Apache/mod_python を使っている場合，エラーは Django によって捕捉されます．
別の言い方をすれば， エラーは Apache レベルまで伝播せず， Apache の
``error_log`` には出力されないということです．

例外は Django のセットアップが全くうまくいっていない場合で，この場合には
"Internal Server Error" がブラウザに表示され， ``error_log`` ファイルには完
全な Python のトレースバックが出力されます． (``error_log`` トレースバック
は複数のログエントリ行に展開されます (これは見苦しくて読みづらいのですが，
mod_python のやり方なので仕方ありません)．

.. _If you get a segmentation fault:

セグメンテーション違反になる場合
================================

Apache がセグメンテーション違反 (segumentation fault) を引き起こす場合， 2
種類の原因が考えられます．いずれも Django 自体とは関係のない原因です．

    1. Python コードが "pyexpat" モジュールを import している場合．
       "pyexpat" は Apache に埋め込まれているバージョンと衝突する場合があり
       ます．詳しくは， `Expat Causing Apache Crash`_ を参照してください．
    2. mod_python と mod_php を同じ Apache のインスタンスで動作させ，バック
       エンドに MySQL を使っている場合．PHP と Python MySQL バックエンドと
       のバージョン衝突で引き起こされる既知の問題かもしれません．これについ
       ては `mod_python FAQ entry`_ に詳しく書かれています．

mod_python を使った設定で問題を解決できない場合，まずは Django フレームワー
クなしの素の mod_python サイトを動かすようにしてみるとよいでしょう．そうす
れば，mod_python 固有の問題を簡単に切り分けられます．この手順については
`Getting mod_python Working`_ で詳しく説明しています．

次のステップでは，テストコードを編集して，自分が使っている全ての Django 関
係のコード -- ビュー，モデル， URLconf, RSS の設定など -- を import してみ
ます．これらのモジュールを import する文をテストハンドラ関数に入れ，ブラウ
ザでテストハンドラの URL にアクセスしてください．クラッシュするようなら，
Django コードの import が問題の原因だということになります．クラッシュしなく
なるまで段階的に import するモジュールを減らしてゆき，原因のモジュールを特
定してください．原因のモジュールを調べて，中で import しているモジュールを
必要に応じて調べて下さい．


.. _Expat Causing Apache Crash: http://www.dscpl.com.au/articles/modpython-006.html
.. _mod_python FAQ entry: http://modpython.org/FAQ/faqw.py?req=show&file=faq02.013.htp
.. _Getting mod_python Working: http://www.dscpl.com.au/articles/modpython-001.html
