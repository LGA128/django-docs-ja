.. _topics-http-views:

=============
Writing Views
=============

.. TBD:

:revision-up-to: 8961 (1.0)

A view function, or *view* for short, is simply a Python function that takes a
Web request and returns a Web response. This response can be the HTML contents
of a Web page, or a redirect, or a 404 error, or an XML document, or an image .
. . or anything, really. The view itself contains whatever arbitrary logic is
necessary to return that response. This code can live anywhere you want, as long
as it's on your Python path. There's no other requirement--no "magic," so to
speak. For the sake of putting the code *somewhere*, let's create a file called
``views.py`` in the ``mysite`` directory, which you created in the previous
chapter.

A simple view
=============

Here's a view that returns the current date and time, as an HTML document:

.. code-block:: python

    from django.http import HttpResponse
    import datetime

    def current_datetime(request):
        now = datetime.datetime.now()
        html = "<html><body>It is now %s.</body></html>" % now
        return HttpResponse(html)

Let's step through this code one line at a time:

    * First, we import the class ``HttpResponse``, which lives in the
      ``django.http`` module, along with Python's ``datetime`` library.

    * Next, we define a function called ``current_datetime``. This is the view
      function. Each view function takes an ``HttpRequest`` object as its first
      parameter, which is typically named ``request``.

      Note that the name of the view function doesn't matter; it doesn't have to
      be named in a certain way in order for Django to recognize it. We're
      calling it ``current_datetime`` here, because that name clearly indicates
      what it does.

    * The view returns an ``HttpResponse`` object that contains the
      generated response. Each view function is responsible for returning an
      ``HttpResponse`` object. (There are exceptions, but we'll get to those
      later.)

.. admonition:: Django's Time Zone
    
    Django includes a ``TIME_ZONE`` setting that defaults to
    ``America/Chicago``. This probably isn't where you live, so you might want
    to change it in your settings file.

Mapping URLs to Views
=====================

So, to recap, this view function returns an HTML page that includes the current
date and time. To display this view at a particular URL, you'll need to create a
*URLconf*; see :ref:`topics-http-urls` for instructions.

.. _Returning errors:

エラーを返す
============

Django では、簡単に HTTP エラーコードを返せます。エラー応答は、すでに述べた
:class:`HttpResponseNotFound`, :class:`HttpResponseForbidden`,
:class:`HttpResponseServerError` といったサブクラスのインスタンスを作成して、
以下の例のように通常の :class:`~django.http.HttpResponse` の代わりに返すだ
けです::

    def my_view(request):
        # ...
        if foo:
            return HttpResponseNotFound('<h1>Page not found</h1>')
        else:
            return HttpResponse('<h1>Page was found</h1>')

ただし、 404 エラーは他の HTTP エラーよりはるかに良く使われるエラーなので、
もっと簡単に扱う方法を提供しています。

.. _The Http404 exception:

Http404 例外
------------

``HttpResponseNotFound`` のようなエラーを返す場合、以下のように、エラーペー
ジの中身になる HTML を指定せねばなりません::

    return HttpResponseNotFound('<h1>Page not found</h1>')

これはちょっと不便ですね。それに、サイト全体で一貫した 404 エラーページを用
意しておく方が賢明です。そこで、 Django には ``Http404`` 例外があります。
ビュー関数のどこかで ``Http404`` 例外を送出すると、 Django はこのエラーを捕
捉して、サイト標準のエラーページを HTTP エラーコード 404 で返します。

例を示しましょう::

    from django.http import Http404

    def detail(request, poll_id):
        try:
            p = Poll.objects.get(pk=poll_id)
        except Poll.DoesNotExist:
            raise Http404
        return render_to_response('polls/detail.html', {'poll': p})

``Http404`` 例外を使うには、 404 エラーの送出時に表示されるテンプレートを作
成しておかねばなりません。このテンプレートの名前は ``404.html`` で、テンプ
レートツリーの一番上に配置せねばなりません。

.. _Customizing error views:

エラービューのカスタマイズ
==========================

.. _The 404 (page not found) view:

404 (ページが見つかりません) ビュー
------------------------------------

``Http404`` 例外を送出すると、 Django は 404 エラー処理用の特殊なビューをロー
ドします。デフォルトでは、このビューは
``django.views.defaults.page_not_found`` に設定されています。
``django.views.defaults.page_not_found`` は ``404.html`` という名前のテンプ
レートをロードしてレンダします。

このため、テンプレートディレクトリの再上階層に ``404.html`` という名前のテ
ンプレートを作成しておかねばなりません。このテンプレートは全ての 404 エラー
に対して用いられます。

``page_not_found`` ビューは 99% の Web アプリケーションの要求を満たすはずで
 すが、 404 ビューを自作したい場合には、URLconf で以下のようにして
 ``handler404`` を指定します::

    handler404 = 'mysite.views.my_custom_404_view'

舞台裏では、 Django は ``handler404`` を介して 404 ビューを捜し出します。デ
フォルトでは、 URLconf の以下の行::

    from django.conf.urls.defaults import *

によって、 ``handler404`` が現在のモジュールに取り込まれます。
``django/conf/urls/defaults.py`` を見れば分かりますが、 ``handler404`` のデ
フォルト値は ``'django.views.defaults.page_not_found'`` に設定されています。

404 ビューについて、知っておかねばならないことが 3 つあります:

    * 404 ビューは、リクエストされた URL に対して、 Django が URLconf の全
      ての正規表現を調べた結果、一致するものをみつけられなかった場合にも呼
      び出されます。

    * 404 ビューを自作せず、ただデフォルトのビューを使う場合でも、一つだけ
      やらねばならないこととして、 ``404.html`` という名前のテンプレートを
      作成せねばなりません。このテンプレートはテンプレートディレクトリの最
      上階層に配置します。デフォルトの 404 ビューは全ての 404 エラーに対
      して同じテンプレートを使います。デフォルトの 404 ビューは、 404 エラー
      を引き起こした URL を、``request_path`` という変数としてテンプレート
      に渡します。

    * 404 ビューに渡されるコンテキストは ``RequestContext`` なので、
      テンプレートには ``TEMPLATE_CONTEXT_PROCESSORS`` で追加した変数も
      渡ります。

    * (settings モジュールで) ``DEBUG`` を ``True`` にすると、 404 ビューは
      呼び出されず、代わりにトレースバックが表示されます。

.. _The 500 (server error) view:

500 (サーバエラー) ビュー
---------------------------

404 エラーと同様に、 Django はビューのコード上で実行時エラーに遭遇した場合
の挙動も特別扱いしています。ビューを実行した結果、例外が送出されると、
Django はデフォルトで ``django.views.defaults.server_error`` というビューを
呼び出します。このビューは ``500.html`` というテンプレートをロードしてレン
ダします。

このため、テンプレートディレクトリの再上階層に ``500.html`` という名前のテ
ンプレートを作成しておかねばなりません。このテンプレートは全ての 500 エラー
に対して用いられます。デフォルトの 500 ビューはテンプレートに一切変数を渡さ
ず、空の ``Context`` インスタンスを渡してレンダリングを実行しますが、これは
さらなるエラーが発生するのを防ぐためです。

``server_error`` ビューは 99% の Web アプリケーションの要求を満たすはずです
が、 500 ビューを自作したい場合には、URLconf で以下のようにして 
``handler500`` を指定します::

    handler500 = 'mysite.views.my_custom_error_view'

舞台裏では、 Django は ``handler500`` を介して 500 ビューを捜し出します。デ
フォルトでは、 URLconf の以下の行::

    from django.conf.urls.defaults import *

によって、 ``handler500`` が現在のモジュールに取り込まれます。
``django/conf/urls/defaults.py`` を見れば分かりますが、 ``handler500`` のデ
フォルト値は ``'django.views.defaults.server_error'`` に設定されています。

