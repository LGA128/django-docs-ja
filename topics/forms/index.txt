.. _topics-forms-index:

==================
フォームの操作
==================

:revision-up-to: 8961 (1.0)

.. admonition:: このドキュメントについて

    このドキュメントでは、 Django のフォーム処理機能を紹介しています。
    フォーム API の詳細は、 :ref:`ref-forms-api` を参照してください。
    利用できるフィールドタイプのドキュメントは :ref:`ref-forms-fields`
    を参照してください。

``django.forms`` は、 Django のフォーム処理ライブラリです。

フォームによって提出 (submit) されたデータの処理は、Django の
:class:`~django.http.HttpRequest` クラスだけでも実現できます。しかし、フォー
ムライブラリを使うと、フォーム処理に必要な共通のタスクの面倒を見てくれます。
フォームライブラリを使えば、以下のようなことを実現できます:

    1. フォームウィジェットから、 HTML フォームを自動的に生成して表示できま
       す。
    2. 提出されたデータに対して、バリデーション規則 (validation rule) を適
       用できます。
    3. バリデーションエラーを検出したときに、フォームをエラーメッセージ付き
       で表示できます。
    4. 提出されたデータを、適切な Python のデータ型に変換できます。

概要
========

このライブラリでは、以下のような概念を扱います:

.. glossary::

    ウィジェット (Widget)
        ``<input type="text">`` や ``<textarea>`` のような、 HTML フォーム
        ウィジェットに対応するクラスです。ウィジェットから HTML へのレンダ
        リングもこのクラスで行われます。

    フィールド (Field)
        データの検証を行うためのクラスです。例えば、 ``EmailField`` はデー
        タが有効な電子メールアドレスかどうか検証します。

    フォーム (Form)
        フィールドの集まりで、データの検証や HTML への表示方法が実装された
        ものです。

    フォームメディア (Form Media)
        フォームをレンダするときに必要な CSS や JavaScript リソースの定義です。

このライブラリは、データベースレイヤやビュー、テンプレートといった他の
Django コンポーネントに対してカップリングしていません。このライブラリが依存
しているのは settings と ``django.utils`` の二つのヘルパ関数、そして国際化
のためのフックだけです (ただし、このライブラリを使うために国際化の機能を使
わねばならないわけではありません) 。

.. _Form objects:

フォームオブジェクト
====================

フォームオブジェクトは、フォームに含める一連のフィールドや、フォームに入力
した値を受理するために充足しなければならないバリデーション規則をカプセル化
します。フォームクラスは、 ``django.newforms.Form`` クラスをサブクラス化し、
Django のデータベースモデルによく似た方法でフォームのフィールドを定義して作
成します。

一例として、個人のウェブサイトでコンタクトフォームの機能を実装するときに使
うフォームを考えてみましょう::

    from django import forms

    class ContactForm(forms.Form):
        subject = forms.CharField(max_length=100)
        message = forms.CharField()
        sender = forms.EmailField()
        cc_myself = forms.BooleanField(required=False)

フォームは ``Field`` オブジェクトの組み合わせでできています。今回の例では、
``subject`` (題名)、 ``message`` (メッセージ)、 ``sender`` (送信者)、そして
``cc_myself`` (自分に CC する)、の 4 つのフィールドをフォームに持たせます。
``CharField`` や ``EmailField``, ``BooleanField`` はフィールド型です。
フィールド型の一覧は :ref:`ref-forms-fields` を参照してください。

:ref:`ModelForm <topics-forms-modelforms>` を使えば、フォームを使って
Django のモデルを直接追加したり編集したりしたいときに、モデルと重複する記述
をせずにすみます。

.. TBD

Using a form in a view
----------------------

The standard pattern for processing a form in a view looks like this::

   def contact(request):
       if request.method == 'POST': # If the form has been submitted...
           form = ContactForm(request.POST) # A form bound to the POST data
           if form.is_valid(): # All validation rules pass
               # Process the data in form.cleaned_data
               # ...
               return HttpResponseRedirect('/thanks/') # Redirect after POST
       else:
           form = ContactForm() # An unbound form
   
       return render_to_response('contact.html', {
           'form': form,
       })


There are three code paths here:

    1. If the form has not been submitted, an unbound instance of ContactForm is
       created and passed to the template.
    2. If the form has been submitted, a bound instance of the form is created
       using ``request.POST``. If the submitted data is valid, it is processed
       and the user is re-directed to a "thanks" page.
    3. If the form has been submitted but is invalid, the bound form instance is
       passed on to the template.

.. versionchanged:: 1.0
    The ``cleaned_data`` attribute was called ``clean_data`` in earlier releases.

The distinction between **bound** and **unbound** forms is important. An unbound
form does not have any data associated with it; when rendered to the user, it
will be empty or will contain default values. A bound form does have submitted
data, and hence can be used to tell if that data is valid. If an invalid bound
form is rendered it can include inline error messages telling the user where
they went wrong.

See :ref:`ref-forms-api-bound-unbound` for further information on the
differences between bound and unbound forms.

Processing the data from a form
-------------------------------

Once ``is_valid()`` returns ``True``, you can process the form submission safe
in the knowledge that it conforms to the validation rules defined by your form.
While you could access ``request.POST`` directly at this point, it is better to
access ``form.cleaned_data``. This data has not only been validated but will
also be converted in to the relevant Python types for you. In the above example,
``cc_myself`` will be a boolean value. Likewise, fields such as ``IntegerField``
and ``FloatField`` convert values to a Python int and float respectively.

Extending the above example, here's how the form data could be processed::

    if form.is_valid():
        subject = form.cleaned_data['subject']
        message = form.cleaned_data['message']
        sender = form.cleaned_data['sender']
        cc_myself = form.cleaned_data['cc_myself']
    
        recipients = ['info@example.com']
        if cc_myself:
            recipients.append(sender)
    
        from django.core.mail import send_mail
        send_mail(subject, message, sender, recipients)
        return HttpResponseRedirect('/thanks/') # Redirect after POST

For more on sending e-mail from Django, see :ref:`topics-email`.

Displaying a form using a template
----------------------------------

Forms are designed to work with the Django template language. In the above
example, we passed our ``ContactForm`` instance to the template using the
context variable ``form``. Here's a simple example template::

    <form action="/contact/" method="POST">
    {{ form.as_p }}
    <input type="submit" value="Submit">
    </form>

The form only outputs its own fields; it is up to you to provide the surrounding
``<form>`` tags and the submit button.

``form.as_p`` will output the form with each form field and accompanying label
wrapped in a paragraph. Here's the output for our example template::

   <form action="/contact/" method="POST">
   <p><label for="id_subject">Subject:</label>
       <input id="id_subject" type="text" name="subject" maxlength="100" /></p>
   <p><label for="id_message">Message:</label>
       <input type="text" name="message" id="id_message" /></p>
   <p><label for="id_sender">Sender:</label>
       <input type="text" name="sender" id="id_sender" /></p>
   <p><label for="id_cc_myself">Cc myself:</label>
       <input type="checkbox" name="cc_myself" id="id_cc_myself" /></p>
   <input type="submit" value="Submit">
   </form>
   
Note that each form field has an ID attribute set to ``id_<field-name>``, which
is referenced by the accompanying label tag. This is important for ensuring
forms are accessible to assistive technology such as screen reader software. You
can also :ref:`customize the way in which labels and ids are generated
<ref-forms-api-configuring-label>`.

You can also use ``form.as_table`` to output table rows (you'll need to provide
your own ``<table>`` tags) and ``form.as_ul`` to output list items.

フォームテンプレートのカスタマイズ
-----------------------------------

デフォルトの HTML 出力が気に入らなければ、 Django のテンプレート言語を使っ
て、フォームの表示方法をいくらでもカスタマイズできます。例えば、前掲の例は
以下のように拡張できます::

    <form action="/contact/" method="POST">
        <div class="fieldWrapper">
            {{ form.subject.errors }}
            <label for="id_subject">E-mail subject:</label>
            {{ form.subject }}
        </div>
        <div class="fieldWrapper">
            {{ form.message.errors }}
            <label for="id_message">Your message:</label>
            {{ form.message }}
        </div>
        <div class="fieldWrapper">
            {{ form.sender.errors }}
            <label for="id_sender">Your email address:</label>
            {{ form.sender }}
        </div>
        <div class="fieldWrapper">
            {{ form.cc_myself.errors }}
            <label for="id_cc_myself">CC yourself?</label>
            {{ form.cc_myself }}
        </div>
        <p><input type="submit" value="Send message"></p>
    </form>

各フォームフィールドは、その名前に従って、 ``{{ form.name_of_field }}``
で出力でき、フォームウィジェットを表示するための適切な HTML を生成します。
``{{ form.name_of_field.errors }}`` はフォームエラーのリストを以下のような
無番号リストで表示します::

   <ul class="errorlist">
       <li>Sender is required.</li>
   </ul>

リストには ``errorlist`` という CSS があてられていて、表示スタイルを変更で
きます。エラーの表示方法をもっと細かく制御したければ、ループを使って以下の
ように表現できます::

    {% if form.subject.errors %}
        <ol>
        {% for error in form.message.errors %}
            <li><strong>{{ error|escape }}</strong></li>
        {% endfor %}
        </ol>
    {% endif %}
    
その他のトピック
==================

ここではフォームの基本を説明しましたが、フォームライブラリのできることはもっ
とたくさんあります:

.. toctree::
   :maxdepth: 1

   modelforms
   formsets
   media
   
.. seealso::

    :ref:`フォーム API リファレンス <ref-forms-index>`
